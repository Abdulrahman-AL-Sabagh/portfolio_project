generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  M
  W
}

enum Status {
  MARRIED
  SINGLE
}

model User {
  id                String    @id @default(uuid())
  name              String
  email             String    @unique
  password          String
  avatar            String?
  profileBackground String?
  birthday          DateTime? @map("birthday")
  job               String?
  location          String?
  status            Status?
  aboutUser         String?
  gender            Gender?

  lists                List[]
  posts                Post[]
  LikedPosts           LikedPost[]
  BookmarkedPost       BookmarkedPost[]
  friends              UserFriend[]     @relation(name: "USER_FRIEND_USERID_FK")
  friendsOfUserFriends UserFriend[]     @relation(name: "USER_FRIEND_FRIENDID_FK")
  comments             Comment[]

  OtherSocialMedia OtherSocialMedia[]
}

model List {
  id         String @id @default(uuid())
  title      String @unique
  titleColor String
  userId     String
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks      Task[]
  color      String
}

model Task {
  id          String    @id @default(uuid())
  title       String
  description String?
  deadLine    DateTime?
  titleColor  String?
  listId      String
  list        List      @relation(fields: [listId], references: [id], onDelete: Cascade)
}

model Post {
  id             String           @id @default(uuid())
  publishedAt    DateTime         @default(now())
  title          String
  description    String
  image          String?
  LikedPost      LikedPost[]
  BookmarkedPost BookmarkedPost[]
  comments       Comment[]
  userId         String
  postedBy       User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LikedPost {
  userId String
  postId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([postId, userId])
}

model BookmarkedPost {
  userId String
  postId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([postId, userId])
}

model OtherSocialMedia {
  id     String @id @default(uuid())
  userId String
  name   String

  link String
  Icon String
  user User   @relation(fields: [userId], references: [id])
}

model UserFriend {
  userId   String
  friendId String

  user   User @relation(name: "USER_FRIEND_USERID_FK", fields: [userId], references: [id], onDelete: Cascade)
  friend User @relation(name: "USER_FRIEND_FRIENDID_FK", fields: [friendId], references: [id], onDelete: Cascade)

  @@id([userId, friendId])
}

model Comment {
  id          String   @id @default(uuid())
  userId      String
  postId      String
  content     String
  publishedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}
