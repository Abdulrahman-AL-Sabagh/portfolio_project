generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String             @id @default(uuid())
  name                 String
  email                String             @unique
  password             String
  avatar               String?
  aboutUser            String?
  job                  String?
  location             String?
  profileBackground    String?
  birthday             DateTime?
  gender               Gender?
  status               Status?
  BookmarkedPost       Bookmark[]
  comments             Comment[]
  LikedPosts           Like[]
  lists                List[]
  OtherSocialMedia     OtherSocialMedia[]
  posts                Post[]
  friendsOfUserFriends UserFriend[]       @relation("USER_FRIEND_FRIENDID_FK")
  friends              UserFriend[]       @relation("USER_FRIEND_USERID_FK")
}

model List {
  id         String @id @default(uuid())
  title      String @unique
  titleColor String?
  userId     String
  color      String?
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks      Task[]
}

model Task {
  id          String    @id @default(uuid())
  title       String
  description String?
  deadLine    DateTime?
  titleColor  String?
  listId      String
  list        List      @relation(fields: [listId], references: [id], onDelete: Cascade)
}

model Post {
  id             String           @id @default(uuid())
  publishedAt    DateTime         @default(now())
  title          String?
  description    String
  image          String?
  userId         String
  postedBy       User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  BookmarkedPost Bookmark[]
  comments       Comment[]
  LikedPost      Like[]
}

model Like {
  userId String @unique
  postId String @unique
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([postId, userId])
}

model Bookmark {
  userId String @unique
  postId String @unique
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([postId, userId])
}

model OtherSocialMedia {
  id     String @id @default(uuid())
  userId String
  name   String
  link   String
  Icon   String
  user   User   @relation(fields: [userId], references: [id])
}

model UserFriend {
  userId   String
  friendId String
  friend   User   @relation("USER_FRIEND_FRIENDID_FK", fields: [friendId], references: [id], onDelete: Cascade)
  user     User   @relation("USER_FRIEND_USERID_FK", fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, friendId])
}

model Comment {
  userId      String
  postId      String
  content     String
  publishedAt DateTime @default(now())
  id          String   @id @default(uuid())
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Gender {
  M
  W
}

enum Status {
  MARRIED
  SINGLE
}
